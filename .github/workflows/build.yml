name: Deploy release based on manifest.json version

on:
  push:
    branches:
      - main
    paths:
      - 'src/manifest.json'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-14  # Use macOS 14 which typically has newer Xcode versions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Select Xcode version
        run: |
          # List available Xcode versions
          ls /Applications/ | grep Xcode
          # Try to use the latest available Xcode
          if [ -d "/Applications/Xcode_16.1.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          elif [ -d "/Applications/Xcode_16.0.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
          elif [ -d "/Applications/Xcode_15.4.app" ]; then
            echo "Warning: Using older Xcode version that may not support project format"
            sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          fi
          # Verify selected Xcode version
          xcodebuild -version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build project (KST timestamps)
        run: npm run build
        env:
          TZ: Asia/Seoul

      # Build Summar installer (macOS)
      - name: Make build script executable
        run: chmod +x build-summar-installer.sh

      - name: Build installer (macOS)
        run: ./build-summar-installer.sh
        env:
          TZ: Asia/Seoul

      - name: Extract version from manifest.json
        id: version
        run: |
          VERSION=$(jq -r .version src/manifest.json)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest commit message
        id: commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create version tag (vX.Y.Z)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.commit.outputs.message }}
          files: |
            dist/summar.zip
            dist/manifest.json
            dist/Summar Installer*.dmg

      - name: Update latest tag to point to this commit
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.sha;
            const ref = 'tags/latest';

            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
              });

              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha,
                force: true,
              });
              console.log('Updated tag: latest');
            } catch (error) {
              if (error.status === 404) {
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/${ref}`,
                  sha,
                });
                console.log('Created tag: latest');
              } else {
                throw error;
              }
            }
